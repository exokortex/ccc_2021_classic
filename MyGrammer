grammar MyGrammer;

//expr: left=expr op=('*'|'/') right=expr        # InfixExpr
//    | left=expr op=('+'|'-') right=expr        # InfixExpr
//    | atom=INT                                 # NumberExpr
//    | '(' expr ')'                             # ParenExpr
//    | atom=HELLO                               # HelloExpr
//    | atom=BYE                                 # ByeExpr
//    ;
//

program: INT (block)*;

block: 'start' statements 'end';

value : (BOOLEAN | INT | STR | callst);

statement : printst | ret | ifelse | vardef | varset | postponest | callst;
statements : (statement)*;
poststatements : (statement)*;

vardef : 'var' name=STR value;
varset : 'set' name=STR value;

callst : 'call' value;
printst: 'print' value;
ret: 'return' value;
ifelse: 'if' cond=value ifpart=statements 'end' 'else' elsepart=statements 'end';

postponest : 'postpone' poststatements 'end';

BOOLEAN: 'true' | 'false';
STR : [a-zA-Z][a-zA-Z0-9]*;
INT  : [0-9]+         ;

WHITESPACE
 : [ \r\t\n] -> skip;